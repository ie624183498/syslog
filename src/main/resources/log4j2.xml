<?xml version="1.0" encoding="UTF-8"?>
<!-- status : 这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,会看到log4j2内部各种详细输出 monitorInterval
         : Log4j能够自动检测修改配置文件和重新配置本身, 设置间隔秒数。 注：本配置文件的目标是将不同级别的日志输出到不同文件，最大2MB一个文件，
    文件数据达到最大值时，旧数据会被压缩并放进指定文件夹 -->
<Configuration status="WARN" monitorInterval="600">
    <properties>
        <!-- 日志路径 -->
        <property name="LOG_HOME">/var/log/itoa_log/task/wireless_onoffline_consumer</property>
        <property name="MODULE_NAME">wireless_onoffline_consumer</property>
    </properties>
    <!-- <CustomLevel>

         log4j2默认：OFF>FATAL>ERROR>WARN>INFO>DEBUG>TRACE>ALL
           intLevel: 0   100   200   300   400 500    600  700
         3	ERROR:	error conditions
         4	WARN:	warning conditions
         6	INFO:	informational messages
         7	DEBUG:	debug-level messages
         -->
    <Appenders>
        <!-- 优先级从高到低分别是 OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL -->
        <!-- 单词解释： Match：匹配 DENY：拒绝 Mismatch：不匹配 ACCEPT：接受 -->
        <!-- DENY，日志将立即被抛弃不再经过其他过滤器； NEUTRAL，有序列表里的下个过滤器过接着处理日志； ACCEPT，日志会被立即处理，不再经过剩余过滤器。 -->
        <!--输出日志的格式
         %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间
         %p : 日志输出格式
         %c : logger的名称
         %m : 日志内容，即 logger.info("message")
         %n : 换行符
         %C : Java类名
         %L : 日志输出所在行数
         %M : 日志输出所在方法名
         hostName : 本地机器名
         hostAddress : 本地ip地址 -->

        <!-- 诊断日志 -->
        <RollingFile name="DiaglogRollingFile" fileName="${LOG_HOME}/dialog/diaglog.log"
                     filePattern="${LOG_HOME}/dialog/diaglog_%d{yyyy-ww}_%i.log.zip" immediateFlush="true" append="true">
            <PatternLayout>
                <!--  -->
                <pattern>%d{ISO8601} ${env:HOSTNAME} ${MODULE_NAME}/%m%n</pattern>
                <!--<pattern>%d{ISO8601} ${env:HOSTNAME} DataCore/%-5p/DIAGLOG: %m%n</pattern>-->
                <!--<pattern>%d{ISO8601} ${env:HOSTNAME} DataCore/%-5p/DEFAULT_MNEMONIC: %-16t %C.%M(%L): %m%n</pattern>-->
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
                <SizeBasedTriggeringPolicy size="200MB"/>
            </Policies>
            <DefaultRolloverStrategy max="30">
                <Delete basePath="${LOG_HOME}/dialog" maxDepth="1">
                    <IfFileName glob="*.zip" />
                    <IfAccumulatedFileCount exceeds="31" />
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>
        <!--这个输出控制台的配置，这里输出除了warn和error级别的信息到System.out -->
        <Console name="console_out_appender" target="SYSTEM_OUT">
            <!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) . -->
            <ThresholdFilter level="INFO" onMatch="ACCEPT"
                             onMismatch="DENY"/>
            <!-- 输出日志的格式 -->
            <PatternLayout pattern="%5p [%t] %d{yyyy-MM-dd HH:mm:ss} (%F:%L) %m%n"/>
        </Console>
    </Appenders>

    <Loggers>
        <!--
        诊断日志的级别，允许修改的范围：
         0	EMERG:	system is unusable
         1	ALERT:	action must be taken immediately
         2	CRITICAL:	critical conditions
         3	ERROR:	error conditions
         4	WARN:	warning conditions
         5	NOTICE:	normal but significant condition
         6	INFO:	informational messages
         7	DEBUG:	debug-level messages -->
        <Logger name="h3c.Diaglog" level="INFO" additivity="false">
            <AppenderRef ref="DiaglogRollingFile"/>
            <AppenderRef ref="console_out_appender"/>
        </Logger>
        <root level="INFO">
            <AppenderRef ref="DiaglogRollingFile"/>
            <AppenderRef ref="console_out_appender"/>
        </root>
    </Loggers>

</Configuration>